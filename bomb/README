This is an x86-64 bomb for self-study students.

[TOC]

record:

#### phase_1

```assembly
0000000000400ee0 <phase_1>:
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>
  400eee:	85 c0                	test   %eax,%eax
  400ef0:	74 05                	je     400ef7 <phase_1+0x17>
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>
  400ef7:	48 83 c4 08          	add    $0x8,%rsp
  400efb:	c3                   	retq

```

`strings_not_equal` may pass two arguments, the `%esi` contains the address `0x402400`, and the `%esi` can use conventionally as the second argument. `strings_not_equal` return a value stored at %eax. `test %eax, %eax`, The TEST operation sets the flags `CF` and `OF` to zero. The `SF` is set to the most significant bit of the result of the AND. If the result is 0, the `ZF` is set to 1, otherwise set to 0. The parity flag is set to the bitwise XNOR of the least significant byte of the result, 1 if the number of ones in that byte is even, 0 otherwise. The value of AF is undefined.

We need to operate the `400ef0 je 400ef7<...>`, the `je` will operate when `ZF` is 1, which also means `test %eax,%eax` need to set `ZF` to 1,(`test` will operate the `%eax` & `%eax`) so the `%eax` must be 0.

The `strings_not_equal` need to return 0, so the two arguments must be the same. We can use gdb to examine the content in 0x402400 or `%esi` after `0x400ee4`. `gdb < x/s 0x402400` will show the content as a string format in 0x402400. Our input must be the same as it.

#### phase_2

```assembly
0000000000400efc <phase_2>:
  400efc:	55                   	push   %rbp
  400efd:	53                   	push   %rbx
  400efe:	48 83 ec 28          	sub    $0x28,%rsp
  400f02:	48 89 e6             	mov    %rsp,%rsi
  400f05:	e8 52 05 00 00       	callq  40145c <read_six_numbers>
  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp)
  400f0e:	74 20                	je     400f30 <phase_2+0x34>
  400f10:	e8 25 05 00 00       	callq  40143a <explode_bomb>
```

From above code we can find we need to input 6 numbers. And the first need to be 1(`(%rsp) is the content in %rsp`), then we can go to `0x400f30`.

```
  400f15:	eb 19                	jmp    400f30 <phase_2+0x34>
  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax
  400f1a:	01 c0                	add    %eax,%eax
  400f1c:	39 03                	cmp    %eax,(%rbx)
  400f1e:	74 05                	je     400f25 <phase_2+0x29>
  400f20:	e8 15 05 00 00       	callq  40143a <explode_bomb>
  400f25:	48 83 c3 04          	add    $0x4,%rbx
  400f29:	48 39 eb             	cmp    %rbp,%rbx
  400f2c:	75 e9                	jne    400f17 <phase_2+0x1b>
  400f2e:	eb 0c                	jmp    400f3c <phase_2+0x40>
  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx
  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
  400f3a:	eb db                	jmp    400f17 <phase_2+0x1b>
```

This part is a loop. Each time, `%rbx` will store the value in the stack and each time `%rbx` grow by 4, then the value of `(%rbx)` compared with `2 * -0x4(%rbx)`, till `%rbp` equal to `%rbx`, so this is a loop to judge the next in the input wether is two-times of it.

So we need to input 6 numbers begining with 1 and along with each doubled before it.

#### phase_3

```
0000000000400f43 <phase_3>:
  400f43:	48 83 ec 18          	sub    $0x18,%rsp
  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx
  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi
  400f56:	b8 00 00 00 00       	mov    $0x0,%eax
  400f5b:	e8 90 fc ff ff       	callq  400bf0 <__isoc99_sscanf@plt>
  400f60:	83 f8 01             	cmp    $0x1,%eax
  400f63:	7f 05                	jg     400f6a <phase_3+0x27>
  400f65:	e8 d0 04 00 00       	callq  40143a <explode_bomb>
  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)
  400f6f:	77 3c                	ja     400fad <phase_3+0x6a>
```

What input will ocupy the address `0xc(%rsp)` and `0x8(%rsp)`. The function `sscanf()` will use as below.

```c
sscanf("format: 0x4025cf", &rdx, &rcx);
```

And the first input can't be 7.

#### phase_6

two-loop come first which prove that the six nums is between [1,6] and each is different
Next, the input nums are all sub by 7.
Then comes a link list which is writen to the end fo the stack in memory.
The link list node contains a value, an id, and a pointer.
The nums you input after subbed by 7 can change the order of the link list.
